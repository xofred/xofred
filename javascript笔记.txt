//////操作DOM元素
//返回不带HTML标签的内容
$('div.span7').text(); //"Simple CMS"
//设置
$('div.span7 > h1').text('fuck GFW'); 

//返回带HTML标签的内容
$('div.span7').html(); //"<h1>fuck GFW</h1>"
//设置
$('div.span7').html("<h1><i>fuck GFW</i></h1>");

////在内容里面
//前面插入
$('h1').prepend('A Nice ');
//后面插入
$('h1').append(' again');

//创建同级元素
$('h1').after("<h3>by CZ</h3>");
$('div.span2 > a:last').before('<a href>网站地图</a><br />');

//删除元素
$('div.span2 > a:last').remove();

//移动元素
var sitemap = $('div.span2 > a:last').remove();
$('div.span2 > a:last').before(sitemap);


//////操作样式
//查看样式
$("p").css("font-size"); //"14px"
//设置样式
$("p").css("font-size", "20px");
//相对原样式设置
var original = parseInt($("p").css("font-size")); //14
$("p").css("font-size", original + 6 +"px");

//用Map设置多个属性，也就是传说中的json啦
//{key1 : value1, key2 : value2, key3 : value3 ...}
$("div.span2").css({"font-size" : "20px", "font-weight" : "bold", "line-height" : "32px"});

////但建议样式交给CSS，js负责接口
//查CSS是否有类
$("p:first").hasClass("bigger"); //false
//新建CSS类
$("p:first").addClass("bigger"); 
//移除CSS类
$("p:first").removeClass("bigger");
$("p:first").removeClass(); //remove all
//切换
$("p:first").toggleClass("bigger"); //有则删之，无则加之

////对浏览器是否可见
//隐藏
$("p:first").hide(); //相当于CSS中设了display: none
//显示
$("p:first").show();
//切换
$("p:first").toggle();

//确保js在DOM全部加载后才开始执行，非常重要！
$(documnet).ready(function(){
  $("p:first").toggle();
})


//////选择DOM元素
//检查jQuery是否加载
jQuery; // 或者就 $; 返回function (e,t){return new st.fn.init(e,t,X)}说明已加载


//找到后jQuery会以字符串数组返回
//找不到会返回空数组[]，注意！空数组也是数组，所以if会判断为true
$("h1"); //find all h1
$("p"); //find all p

$("p.plan"); //找类名为plan的p
$("p#final"); //找ID含final的p
$("p #final"); //注意这是在p里面找ID含final的元素，与上面不同

$("h1, p.plan"); //选择多个元素，注意不要写成 $("h1", "p.plan");

//不良写作风格
$("#final");
$(".errors");
//良好写作风格，找具体
$("p#final");
$("h3.errors");
$("h3.errors, p.errors"); //全要的话也要列出来

//根据位置找元素
$("p:first"); //找第一个p

//根据层次
$("body > span"); //找直接从属body的span
$("p.plan > span"); //例如想将p.plan下的所有span高亮，就不必为此定义一个span class=hightlight


//////javascript基础
////创建变量
//赋值
var message = "Hello world!";
/*
var是保留字
变量名风格camelCase
赋值在右边
一行以分号结束
*/

////变量类型
//动态
var alpha = 42; //integer
var bravo = "Fourty-two"; //string
var charlie = 4.2; //float
var delta = true; //boolean: true, false

////全局函数
//提示框
alert("Hi, Jack!");
//确定框
var answer = confirm("R U sure?"); //确定返回ture, 取消返回false, 搭配if做野
//输入框
var count = prompt("Passenger Count:"); //return as a string

////对象自有函数
//字符串函数
//加了括号才执行！
"SHORT, POOR, UGLY".toLowerCase(); 
"tall, wealthy, handsome".toUpperCase();

"tall, wealthy, handsome".charAt(7);//索引从0开始

alert("Hi!".replace("!", "jack!")); //Hijack!

"tall, wealthy, handsome".split(", "); //["tall", "wealthy", "handsome"]

//数字函数
2 + 0.13；//2.13
2 / 13; //0.15384615384615385
parseInt("8 Sierras, 1 package"); //8, 返回第一个遇到的数字

var nut = 213;
nut.toString(); //"213"

//数组
var perfect = ["tall", "wealthy", "handsome"]; //元素用逗号分隔
alert(perfect[2]); //handsome
perfect.length; //3, length是属性不用加括号！
perfect.reverse(); //["handsome", "wealthy", "tall"],该方法会改变原来的数组，而不会创建新的数组。

