//////AJAX
//$.ajax()
jQuery.ajax( url [, settings ] ); //url是字符串，setting是json的object 
//$.get()相当于
$.ajax({
  url: url,
  data: data,
  success: success,
  dataType: dataType
});


//////事件与动画
////事件
//从DOM中读取
<section id='tabs'>
  <ul>
    <li><a href='#2012-09-27' data-flights='6'>Sep 27</a></li>
    <li><a href='#2012-09-28' data-flights='5'>Sep 28</a></li>
    <li><a href='#2012-09-29' data-flights='5'>Sep 29</a></li>
    <li><a href='#2012-09-30' data-flights='3'>Sep 30</a></li>
    <li><a href='#2012-10-01' data-flights='3'>Oct 1</a></li>
  </ul>

  <div id='2012-09-27'>Loading Sep 27</div>
  <div id='2012-09-28'>Loading Sep 28</div>
  <div id='2012-09-29'>Loading Sep 29</div>
  <div id='2012-09-30'>Loading Sep 30</div>
  <div id='2012-10-01'>Loading Oct 1</div>

  <div id='error'>
    <h2>We are fucked.</h2>
    <p>Sorry about that, <a href='#'>Click Here</a> to try again.</p>
  </div>

  <div id='loading'>
    <h2>Just a minute while we break through the GFW</h2>
  </div>
</section>

$('#tabs ul li:first').html(); //<a href='#2012-09-27' data-flights='6'>Sep 27</a>
$('#tabs ul li:first a').text(); //Sep 27
$('#tabs ul li:first a').attr('href'); //#2012-09-27
$('#tabs ul li:first a').data('flights'); //6

var seatNum = $(this).data('seat');
$('#seatSelected').text(seatNum);
//可以直接写成
$('#seatSelected').text($(this).data('seat'));

//making tabs
jQuery(function($) { //相当于$(document).ready(function ())，但确保里面的$是jquery
  function changeTab(e) { //包成函数让click调用
    e.preventDefault();
    $('#tabs li a.active').removeClass('active').click(changeTab); //相当于bind('click', changeTab)
    $(this).addClass('active').unbind('click', changeTab); //点同一个tab时不触发ajax请求
    showFlights($(this).attr('href')); //利用href和div#形成对应
  }

  function showFlights(activeDiv) {
    $('#tabs div').hide();
    ////AJAX
    $.ajax('/flights', { //格式：/flights?date=%232012-09-27 (#转义成%23)
      data: { date: activeDiv },
      cache: false, //确保浏览器没有旧data的缓存
      beforeSend: function(result) {
	$('#error').hide();
	$('#loading').show();
      },
      complete: function() {
	$('#loading').hide();	
      },
      success: function(result) {
	$(activeDiv).html(result); //先加载再显示
	$(activeDiv).show(); //超链接会返回#XXXX-XX-XX，相当于帮手选择id
      },
      error: function(result) { //例如服务器无法访问时，显示出错信息
	$('#error').show();
      }
    }); //航班数据将用AJAX读取，下面div的事件要用live绑定
  }

  function showNumberOfFlights(e) {
    var num_flights = $(this).data('flights');
    $(this).append("<span class='tooltip'>" + num_flights + " flights</span>");
  }

  function hideNumberOfFlights(e) {
    $('#tabs span.tooltip').remove();
  }

  $('#tabs li:eq(2) a').click(); //默认选择第三列

  $('#tabs li a').bind({ //同一个元素的事件可用bind包起来
    click: changeTab,
    mouseenter: showNumberOfFlights, //显示有几个航班
    mouseleave: hideNumberOfFlights
  });

  $('#error a').click(function(e){ //出错时点击重试
    e.preventDefault();
    showFlights($('#tabs li a.active').attr('href'));
  });
});

//选中超链接
<table id='flights'>
  ...
  <tr>
    <td>3:15 PM</td>
    <td>5:08 PM</td>
    <td>1946</td>
    <td>2 stops</td>
    <td><a href='#' class='selected'>$276</a></td>
    <td><a href='#'>$205</a></td>
  </tr>
  ...
</table>

function selectFlight(e) {
  e.preventDefault();
  $('#flights a.selected').removeClass('selected');
  $(this).addClass('selected');
}

$('#flights a').live('click', selectFlight); //等同于$(document).delegate('#flights a', 'click', selectFlight);
//正路做法：
$('#tabs div').delegate('#flights a', 'click', selectFlight); //不查整个DOM


////函数
function popWarning(message){
  alert("Warning:" + message);
}
//匿名函数
function (message){ //因为没有名字，无法直接调用，作为参数供其他函数调用
  alert("Warning:" + message);
} 
//调用多个函数
$(document).ready(function (){
  $('div#plane_features li').hover(
    function(){$(this).addClass('feature_hover');}, //用逗号分隔
    function(){$(this).removeClass('feature_hover');}
  ); 
});


////鼠标事件
//左键点击
$(document).ready(function(){ //ready 对象完全加载完才执行，这里是全部DOM
  $('p').click(function(){
    alert('Got Ya!');
  });
});
//hide when clicked
$(document).ready(function(){
  $('p').click(function(){
    $(this).hide(); //当前DOM元素，即被点击的p
  });
});
//hover 鼠标移到对象上触发一次，离开时再触发一次
$(document).ready(function(){
  $('p').hover(function(){
    $(this).toggleClass('hightlight');
  });
});

////键盘事件
//keydown 按下时执行一次
//keypress 按住时执行一次或多次
$(document).ready(function(){
  $('body').keypress(
    function(event){
      if (event.which == 102){alert('Fuck!')}; //只在按下F键时触发
    }
  );
});
//keyup 松开时执行一次

////event对象
//.pageX
//
//.pageY
//
//.preventDefault()
var currentWeight = 1850;
$(document).ready(function (){
  $('a#weight_down').click(
    function(event){
      currentWeight = currentWeight - 50;
      $('span#display').text(currentWeight);
      event.preventDefault(); //纯点击，不链接到a#weight_down的地址
      }
    );
});

//.stopPropogation()



////动画特效
$('h1').toggle('slow'); //速度也可以直接填毫秒数，例如2000 
$('h1').slideToggle(); //只有slide没有fade特效
$('h1').fadeToggle(); //只有fade没有slide特效

////AJAX 通过XMLHttpRequest来发送或接收内容
//load
$('span.number').load('/flights/213/gate'); //<span class='number'>动态内容</span>


//////操作DOM元素
//返回不带HTML标签的内容
$('div.span7').text(); //"Simple CMS"
//设置
$('div.span7 > h1').text('fuck GFW'); 

//返回带HTML标签的内容
$('div.span7').html(); //"<h1>fuck GFW</h1>"
//设置
$('div.span7').html("<h1><i>fuck GFW</i></h1>");

////在内容里面
//前面插入
$('h1').prepend('A Nice ');
//后面插入
$('h1').append(' again');

//创建同级元素
$('h1').after("<h3>by CZ</h3>");
$('div.span2 > a:last').before('<a href>网站地图</a><br />');

//删除元素
$('div.span2 > a:last').remove();

//移动元素
var sitemap = $('div.span2 > a:last').remove();
$('div.span2 > a:last').before(sitemap);


//////操作样式
//查看样式
$("p").css("font-size"); //"14px"
//设置样式
$("p").css("font-size", "20px");
//相对原样式设置
var original = parseInt($("p").css("font-size")); //14
$("p").css("font-size", original + 6 +"px");

//用Map设置多个属性，也就是传说中的json啦
//{key1 : value1, key2 : value2, key3 : value3 ...}
$("div.span2").css({"font-size" : "20px", "font-weight" : "bold", "line-height" : "32px"});

////但建议样式交给CSS，js负责接口
//查CSS是否有类
$("p:first").hasClass("bigger"); //false
//新建CSS类
$("p:first").addClass("bigger"); 
//移除CSS类
$("p:first").removeClass("bigger");
$("p:first").removeClass(); //remove all
//切换
$("p:first").toggleClass("bigger"); //有则删之，无则加之

////对浏览器是否可见
//隐藏
$("p:first").hide(); //相当于CSS中设了display: none
//显示
$("p:first").show();
//切换
$("p:first").toggle();

//确保js在DOM全部加载后才开始执行，非常重要！
$(documnet).ready(function(){
  $("p:first").toggle();
})


//////选择DOM元素
//检查jQuery是否加载
jQuery; // 或者就 $; 返回function (e,t){return new st.fn.init(e,t,X)}说明已加载


//找到后jQuery会以字符串数组返回
//找不到会返回空数组[]，注意！空数组也是数组，所以if会判断为true
$("h1"); //find all h1
$("p"); //find all p

$("p.plan"); //找类名为plan的p
$("p#final"); //找ID含final的p
$("p #final"); //注意这是在p里面找ID含final的元素，与上面不同

$("h1, p.plan"); //选择多个元素，注意不要写成 $("h1", "p.plan");

//不良写作风格
$("#final");
$(".errors");
//良好写作风格，找具体
$("p#final");
$("h3.errors");
$("h3.errors, p.errors"); //全要的话也要列出来

//根据位置找元素
$("p:first"); //找第一个p

//根据层次
$("body > span"); //找直接从属body的span
$("p.plan > span"); //例如想将p.plan下的所有span高亮，就不必为此定义一个span class=hightlight


//////javascript基础
////创建变量
//赋值
var message = "Hello world!";
/*
var是保留字
变量名风格camelCase
赋值在右边
一行以分号结束
*/

////变量类型
//动态
var alpha = 42; //integer
var bravo = "Fourty-two"; //string
var charlie = 4.2; //float
var delta = true; //boolean: true, false

////全局函数
//提示框
alert("Hi, Jack!");
//确定框
var answer = confirm("R U sure?"); //确定返回ture, 取消返回false, 搭配if做野
//输入框
var count = prompt("Passenger Count:"); //return as a string

////对象自有函数
//字符串函数
//加了括号才执行！
"SHORT, POOR, UGLY".toLowerCase(); 
"tall, wealthy, handsome".toUpperCase();

"tall, wealthy, handsome".charAt(7);//索引从0开始

alert("Hi!".replace("!", "jack!")); //Hijack!

"tall, wealthy, handsome".split(", "); //["tall", "wealthy", "handsome"]

//数字函数
2 + 0.13；//2.13
2 / 13; //0.15384615384615385
parseInt("8 Sierras, 1 package"); //8, 返回第一个遇到的数字

var nut = 213;
nut.toString(); //"213"

//数组
var perfect = ["tall", "wealthy", "handsome"]; //元素用逗号分隔
alert(perfect[2]); //handsome
perfect.length; //3, length是属性不用加括号！
perfect.reverse(); //["handsome", "wealthy", "tall"],该方法会改变原来的数组，而不会创建新的数组。

